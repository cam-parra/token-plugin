#!groovy

def sovLibrary = library(identifier: 'sovrin-aws-codebuild@master', retriever: modernSCM(
    github(credentialsId: 'sovbot-github', repoOwner: 'sovrin-foundation', repository: 'aws-codebuild-pipeline-plugin')
)).com.sovrin.pipeline

logger = sovLibrary.Logger.new(this)
notifier = sovLibrary.Notifier.new(this)
logger.setGlobalLevel('TRACE')

def nodeLabels = [
        codeBuild: env.LIBSOVTOKEN_CODEBUILD_NODE_LABEL ?: 'codebuild',
        macos: env.LIBSOVTOKEN_MACOS_NODE_LABEL ?: 'macos',
]

pipelineWrapper({
    nodeWrapper(nodeLabels.codeBuild) {

        List osnames = ['xenial']
        List projects = ['sovtoken', 'sovtokenfees']
        List goals = ['test']

        //put code build containers inside a vpc under our dev account
        env.USE_VPC_CONFIG = true

        stage('Checkout from SCM') {
            checkout scm
        }

        def utils = sovLibrary.Utils.new(this)
        def buildCtx = sovLibrary.AwsCodeBuildHelper.BuildCtx.new('plugin',
            ['devops', 'sovtoken/sovtoken/__metadata__.py', 'sovtokenfees/sovtokenfees/__metadata__.py'])
        def awsCBHelper = sovLibrary.AwsCodeBuildHelper.new(this, buildCtx)

        stage('Upload source to S3') {
            awsCBHelper.uploadSourceToS3()
        }

        Map builds = projects.collectEntries { proj ->
            osnames.collectEntries { osname ->
                ["$osname:$proj": [
                    "nodeLabel": "$nodeLabels.codeBuild",
                    "build": {
                        def ciImageTag
                        def prTag = "ci-$osname-$proj"

                        stage("$osname:$proj: Resolve image tag") {
                            def _imgVersion = utils.shStdout("OSNAME=$osname make -C devops image_ci_version -s")
                            ciImageTag = "$_imgVersion-$osname-$proj-ci"
                            logger.info("CI docker image tag: $ciImageTag")
                        }

                        // This is a dirty workaround to make awsCBHelper work in parallel
                        if ( proj != "sovtoken" ) {
                            sleep(time : 5, unit : "SECONDS")
                        }

                        awsCBHelper.build() {
                            projectTag = prTag

                            // build spec for env image
                            envBuildSrc = ['devops', "${proj}/${proj}/__metadata__.py"] // TODO make more accurate
                            envBuildCmds = [
                                'export PROJECT_DIR=$PWD',
                                'make -C devops image_ci'
                            ]
                            envBuildEnvv = [
                                [name: 'OSNAME', value: osname],
                                [name: 'SRC_DIR_NAME', value: proj],
                                [name: 'DOCKER_NAME', value: awsCBHelper.buildCtx.projectName],
                                [name: 'DOCKER_TAG', value: ciImageTag],
                            ]

                            // env and build spec
                            imageTag = ciImageTag
                            buildspec = 'devops/aws-codebuild/buildspec.yml'
                            envv = [
                                [name: 'OSNAME', value: osname],
                                [name: 'MAKE_GOALS', value: goals.join(' ')],
                                [name: 'SRC_DIR_NAME', value: proj],
                                [name: 'PYTEST_ARGS', value: "-l --junit-xml=/tmp/artifacts/logs/test.${proj}.xml"],
                            ]

                            onArtifacts = {
                                this.stage("$osname:$proj: Archive artifacts") {
                                    utils.archiveArtifacts("logs/*.out*") {
                                        truncate = true
                                        allowEmptyArchive = true
                                    }

                                    this.junit "logs/test.${proj}.xml"
                                }
                            }
                        }
                    }
                ]]
            }
        }

        stage("Build and test") {
            builds.failFast = false
            utils.parallel builds
        }
    }
}, { err ->
    if (err) {
        logger.error("Pipeline failed with the error $err")
    }

    stage("Build result notification") {
        notifier.email()
    }
})
